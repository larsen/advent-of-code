(in-package #:advent-of-code)

(defun read-navigation-instructions ()
  (loop for l in (uiop:read-file-lines
                  (asdf:system-relative-pathname 'advent-of-code "inputs/2020/day12"))
        collect (register-groups-bind (command (#'parse-integer param))
                    ("\(\\w\)\(\\d+\)" l)
                  (cons command param))))

(defun aoc2020/day12/solution1 ()
  (let ((pos-x 0)
        (pos-y 0)
        (heading 0))
    (loop for (command . param) in (read-navigation-instructions)
          do (switch (command :test #'string=)
               ("N" (incf pos-y param))
               ("S" (decf pos-y param))
               ("W" (decf pos-x param))
               ("E" (incf pos-x param))
               ("F" (case heading
                      (0 (incf pos-x param))
                      (90 (incf pos-y param))
                      (180 (decf pos-x param))
                      (270 (decf pos-y param))))
               ("R" (setf heading (mod (- heading param) 360)))
               ("L" (setf heading (mod (+ heading param) 360)))))
    (+ (abs pos-x)
       (abs pos-y))))

(defun aoc2020/day12/solution2 ()
  (let ((pos-x 0)
        (pos-y 0)
        (waypoint-delta-x 10)
        (waypoint-delta-y 1))
    (loop for (command . param) in (read-navigation-instructions)
          do (switch (command :test #'string=)
               ("N" (incf waypoint-delta-y param))
               ("S" (decf waypoint-delta-y param))
               ("W" (decf waypoint-delta-x param))
               ("E" (incf waypoint-delta-x param))
               ("F" (incf pos-x (* waypoint-delta-x param))
                    (incf pos-y (* waypoint-delta-y param)))
               ("L" (loop repeat (mod (/ param 90) 4)
                          do (let ((temp-x waypoint-delta-x)
                                   (temp-y waypoint-delta-y))
                               (setf waypoint-delta-x (* temp-y -1)
                                     waypoint-delta-y temp-x))))
               ("R" (loop repeat (mod (/ param 90) 4)
                          do (let ((temp-x waypoint-delta-x)
                                   (temp-y waypoint-delta-y))
                               (setf waypoint-delta-x temp-y
                                     waypoint-delta-y (* temp-x -1)))))))
    (+ (abs pos-x)
       (abs pos-y))))
