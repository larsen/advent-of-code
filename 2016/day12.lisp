(in-package #:advent-of-code)

(defun read-monorail-instructions ()
  (uiop:read-file-lines (asdf:system-relative-pathname
                         'advent-of-code "inputs/2016/day12-test")))

(defun simulate-monorail-computer (instructions &key (register-values '(0 0 0 0)))
;  (declare (optimize (speed 3) (safety 0) (debug 3)))
  (let ((registers (make-hash-table :test 'equalp))
        (pc 0))
    (loop for register in '("a" "b" "c" "d")
          for value in register-values
          do (setf (gethash register registers) value))
    (setf (gethash "c" registers) 1)
    (loop for instr = (nth pc instructions)
          do                          ; (format t "~d: ~a~%" pc instr)
             (cond
               ((cl-ppcre:scan "cpy ([a-d]) ([a-d])" instr)
                (register-groups-bind (register-from register-to)
                    ("cpy ([a-d]) ([a-d])" instr)
                  (setf (gethash register-to registers)
                        (gethash register-from registers))
                  (incf pc)))
               ((cl-ppcre:scan "cpy ([0-9-]+) ([a-d])" instr)
                (register-groups-bind (val register-to)
                    ("cpy ([0-9-]+) ([a-d])" instr)
                  (setf (gethash register-to registers)
                        (parse-integer val))
                  (incf pc)))
               ((cl-ppcre:scan "jnz ([0-9-]+) ([0-9-]+)" instr)
                (register-groups-bind (value-to-compare val)
                    ("jnz ([0-9-]+) ([0-9-]+)" instr)
                  (if (not (zerop (parse-integer value-to-compare)))
                      (incf pc (parse-integer val))
                      (incf pc))))
               ((cl-ppcre:scan "jnz ([a-d]) ([0-9-]+)" instr)
                (register-groups-bind (register val)
                    ("jnz ([a-d]) ([0-9-]+)" instr)
                  (if (not (zerop (gethash register registers)))
                      (incf pc (parse-integer val))
                      (incf pc))))
               ((cl-ppcre:scan "inc ([a-d])" instr)
                (register-groups-bind (register)
                    ("inc ([a-d])" instr)
                  (incf (gethash register registers))
                  (incf pc)))
               ((cl-ppcre:scan "dec ([a-d])" instr)
                (register-groups-bind (register)
                    ("dec ([a-d])" instr)
                  (decf (gethash register registers))
                  (incf pc)))
               (t (error "Unrecognized instruction!")))
          until (> pc (- (length instructions) 1))
          finally (return (gethash "a" registers)))))

(defun aoc2016/day12/solution1 ()
  (simulate-monorail-computer (read-monorail-instructions)))

(defun aoc2016/day12/solution2 ()
  (simulate-monorail-computer (read-monorail-instructions)
                              :register-values '(0 0 1 0)))
